#!/bin/bash

# USAGE: isolate delta_dir [OPTIONS] CMD ARG1 ... ARGN

# _error <msg>
_error() {
  echo "[ISOLATE] Error: $@" >&2
  exit 10
}

_usage() {
  cat <<EOF
USAGE: isolate delta_dir [OPTIONS] CMD ARG1 ... ARGN

OPTIONS:
  -b|--bind <abs_dir>   Using an absolute path, bind this directory to the
                        new pseudo-root. NOTE: You cannot specify the delta
                        directory, not any of its parent folders
                        
  -l|--lower <abs_dir>  Using an absolute path, add a directory to the lowers
                        that are mounted during the overlay. NOTE: You cannot 
                        specify the delta directory, not any of its parent 
                        folders

  - delta_dir: The directory to deposite any changes made while in isolation
  - CMD ARGS: The command and arguments to be executed in the environment
  
EXAMPLES:
  ./isolate test -b /bin -b /usr/bin -b /lib -b /usr/lib echo hello
  
EOF
}

if [ $# -lt 4 ]; then
  _usage
  _error "Not enough arguments"
fi
if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
  _usage
  exit 0
fi
if [ $EUID -ne 0 ]; then _error "User must be root to run the isolation step"; fi
if ! ( lsmod | grep -qs overlay ); then
  modprobe overlay
  if $? -ne 0; then
    _error "Could not activate the kernel overlay module"
  fi
fi

delta_dir="${1}"; shift
tmpdir="$(dirname "$(realpath "${delta_dir}")")/.isotmp"
wkdir="${tmpdir}/work"
mntdir="${tmpdir}/mnt"
psrtdir="${tmpdir}/root"
binds="${tmpdir}/binds"
lowers="${psrtdir}"

touch "${binds}"
while [ "${1}" == "-l" -o "${1}" == "-b" ]; do
  case "${1}" in
    -b|--bind)
      echo "${2}" >> "${binds}"
    ;;
    
    -l|--lower)
      lowers="${lowers}:${2}"
    ;;
  esac
  shift
  shift
done

while read bnd; do
  mkdir -p "${psrtdir}${bnd}"
  mount --bind -o ro "${bnd}" "${psrtdir}${bnd}"
done < "${binds}"
mkdir -p "${wkdir}" "${mntdir}" "${psrtdir}"
mount -t overlay overlay -olowerdir=${tool_dirs},upperdir=${delta_dir},workdir=${wkdir} "${mntdir}"
chroot "${mntdir}" $@
umount "${mntdir}"
while read bnd; do
  umount "${psrtdir}${bnd}"
done < "${binds}"
rm -rf "${psrtdir}"